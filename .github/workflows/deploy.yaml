name: Production Deployment

on:
  workflow_run:
    workflows: ['test']
    types:
      - completed

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      commit_sha: ${{ steps.sha.outputs.commit_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: versioning
        run: |
          VERSION=$(grep -m1 '^version\s*=' pyproject.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Get commit SHA
        id: sha
        run: |
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/bankapp:latest
            ${{ vars.DOCKERHUB_USERNAME }}/bankapp:${{ needs.prepare.outputs.version }}
            ${{ vars.DOCKERHUB_USERNAME }}/bankapp:sha-${{ needs.prepare.outputs.commit_sha }}
          build-args: |
            COMMIT_SHA=${{ needs.prepare.outputs.commit_sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan ${{ secrets.SSH_SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Secure Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_SERVER_HOST }}
          username: ${{ secrets.SSH_SERVER_USER }}
          key: ~/.ssh/deploy_key
          script: |
            set -euxo pipefail
            cd ~/backend
            
            # Verify deployment integrity
            git fetch origin
            [ "$(git rev-parse origin/main)" == "$(git rev-parse HEAD)" ] || exit 1
            
            # Atomic deployment
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d \
              --force-recreate \
              --remove-orphans
            
            # Health verification
            docker ps --filter "name=bankapp" | grep -q "Up" || exit 1
            curl -fsS https://localhost/healthcheck || exit 1
            
            # Cleanup
            docker image prune -af --filter "until=24h"